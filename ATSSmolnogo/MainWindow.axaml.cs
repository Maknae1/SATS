using Avalonia.Controls;
using System;
using System.Collections.Generic;
using System.Linq;

namespace ATSSmolnogo
{
    public partial class MainWindow : Window
    {
        public List<Security.Models.User> SystemUsers = new List<Security.Models.User>();
        public List<Security.Models.OrganizationItem> SystemPosition = new List<Security.Models.OrganizationItem>();
        public List<Security.Models.OrganizationItem> PositionsList = new List<Security.Models.OrganizationItem>(); //список должностей без отделов
        public List<UserPositionClass> users = new List<UserPositionClass>(); //список сотрудников дл€ вывода
        public List<UserPositionClass> permanentUsersList = new List<UserPositionClass>(); //неизмен€емый список сотрудников дл€ удобства
        private Random random = new Random();

        public MainWindow()
        {
            InitializeComponent();
            //инициализаци€ объектов
            sortComboBox.SelectionChanged += SortComboBoxSelectionChanged;
            filtrationComboBox.SelectionChanged += FiltrationComboBoxSelectionChanged;
            SystemUsers = _getBaseUsers();
            SystemPosition = _getBaseOrganizationItem();
            PositionsList = SystemPosition.Where(f => f.orgItemType == Security.Types.OrganizationItemType.Position).ToList();

            //костыль дл€ номальной работы со списком должностей (так как рабоников отдела качества несколько, поле User в классе OrganizationItem у него пустое)
            foreach (var item in PositionsList)
            {
                if (item.Users != null)
                    item.User = item.Users[0];
            }
            permanentUsersList = GetUserPositionClassItems();
            LoadData();
        }

        //метод дл€ получени€ цепочки руководителей по нажтию кнопки
        private void ChainOfSupervisorsButtonClick(object? sender, Avalonia.Interactivity.RoutedEventArgs e)
        {
            long? currentPositionId = (long?)(sender as Button).Tag;

            //исключение курирущего зам директора из цепочки руководителей
            int isPositionCorrect =  currentPositionId > 3 ? SystemPosition.Count(f => f.Id == currentPositionId) : 0;
            if(isPositionCorrect != 0)
            {
                var currentPosition = SystemPosition.First(f => f.Id == currentPositionId);
                List<UserPositionClass> supervisorNames = new List<UserPositionClass>(); //лист цепочки руководителей

                //генераци€ цепочки руководителей
                while (currentPosition.Parent != 2 && currentPosition.Parent != 3 && currentPosition.Parent != 1)
                {
                    //исключение отделов из цепочки руководителей
                    int isSuperVisorDepartment = PositionsList.Count(f => f.Id == currentPosition.Parent);

                    if (isSuperVisorDepartment == 0)
                    {
                        currentPosition = SystemPosition.First(f => f.Id == currentPosition.Parent);
                    }
                    else
                    {
                        //добавление подход€щей должности в цепочку пользователей
                        var currentSupervisor = SystemPosition.First(f => f.Id == currentPosition.Parent);
                        supervisorNames.Add(new UserPositionClass
                        {
                            Id = currentSupervisor.Id,
                            Fullname = SystemUsers.First(f => f.Login == currentSupervisor.User.Login).FullName,
                            Position = currentSupervisor.Name
                        });
                        currentPosition = SystemPosition.First(f => f.Id == currentPosition.Parent);
                    }
                }
                //вывод курирцющего зам директора отдельным значением
                var currentDeputyDirector = SystemPosition.First(f => f.Id == currentPosition.Parent);
                deputyDirectorTextBlock.Text = $" урирующий заместитель директора: {SystemUsers.First(f => f.Login == currentDeputyDirector.User.Login).FullName}";

                //добавление директора в цепочку руководителей
                var director = SystemPosition.First(f => f.Id == 1);
                supervisorNames.Add(new UserPositionClass
                {
                    Id = director.Id,
                    Fullname = SystemUsers.First(f => f.Login == director.User.Login).FullName,
                    Position = director.Name
                });

                //вывод цепочки на эеран
                chainOfSupervisorsListBox.Items = supervisorNames.Select(f => new 
                {
                    f.Fullname,
                    Position = $"({f.Position})"
                });
            }
            else
            {
                //вывод в случае выбора директора дл€ составлени€ цепочки руководителей
                if(currentPositionId == 1)
                    deputyDirectorTextBlock.Text = "—амый главный";
                else
                {
                    //составление цепочки руководителей дл€ зам директора
                    List<UserPositionClass> supervisorNames = new List<UserPositionClass>();
                    var director = SystemUsers.First(f => f.Id == 2);
                    supervisorNames.Add(new UserPositionClass
                    {
                        Id = 1,
                        Fullname = director.FullName,
                        Login = director.Login,
                        Position = "ƒиректор"
                    });

                    chainOfSupervisorsListBox.Items = supervisorNames.Select(f => new
                    {
                        f.Fullname,
                        Position = $"({f.Position})"
                    });
                    deputyDirectorTextBlock.Text = "";
                }
            }
        }

        //фильтраци€ сотрудников
        private void FiltrationComboBoxSelectionChanged(object? sender, SelectionChangedEventArgs e)
        {
            if (filtrationComboBox.SelectedIndex == 1)
                users = GetRandomUsersList();
            LoadData();
        }

        //сортировка
        private void SortComboBoxSelectionChanged(object? sender, SelectionChangedEventArgs e)
        {
            LoadData();
        }

        //загрузка данных
        public void LoadData()
        {
            SystemUsers = _getBaseUsers();
            SystemPosition = _getBaseOrganizationItem();
            PositionsList = SystemPosition.Where(f => f.orgItemType == Security.Types.OrganizationItemType.Position).ToList();
            
            foreach (var item in PositionsList)
            {
                if (item.Users != null)
                    item.User = item.Users[0];
            }
            users = permanentUsersList;

            //фильтраци€ и сортировка списка сотрудников по должност€м
            switch (filtrationComboBox.SelectedIndex)
            {
                case 0:
                    users = GetRandomUser();
                    break;
                case 1:
                    if (sortComboBox.SelectedIndex == 0)
                        users = users.OrderBy(f => f.Parent)
                            .ToList();
                    else
                        users = users.OrderByDescending(f => f.Parent)
                            .ToList();
                    break;
            }

            //вывод всего этого мракобеси€ на экран
            usersListBox.Items = users.Select(f => new
            {
                f.Id,
                f.Fullname,
                f.Position,
                f.Login
            });
        }


        /// <summary>
        /// √енерирует список пользователей и должностей
        /// </summary>
        /// <returns></returns>
        public List<UserPositionClass> GetUserPositionClassItems()
        {
            var userPositions = new List<UserPositionClass>();
            foreach(var item in SystemUsers)
            {
                if(item.Login != "admin")
                {
                    int isPositionUnlucky = PositionsList.Count(f => f.User.Login == item.Login); //начало костыл€ дл€ работников отдела качества

                    switch (isPositionUnlucky)
                    {
                        case 0:
                            //костыль дл€ работников отдела качества (чтобы manage2 тоже выводилс€)
                            var unluckyPosition = PositionsList.First(f => f.Users != null);//должность "работника отдела качества", о которой поле User равно null
                            unluckyPosition.User = unluckyPosition.Users[1];//изменение manage1 на manage2
                            var currentPosition = PositionsList.First(f => f.User.Login == item.Login); 
                            userPositions.Add(new UserPositionClass
                            {
                                Id = currentPosition.Id,
                                Fullname = item.FullName,
                                Position = currentPosition.Name,
                                Login = currentPosition.User.Login,
                                Parent = currentPosition.Parent,
                            });
                            break;

                        case 1:
                            //поиск и добавление в список подход€щего пользовател€
                            var userPosition = PositionsList.First(f => f.User.Login == item.Login);
                            userPositions.Add(new UserPositionClass
                            {
                                Id = userPosition.Id,
                                Fullname = item.FullName,
                                Position = userPosition.Name,
                                Login = userPosition.User.Login,
                                Parent = userPosition.Parent != null? userPosition.Parent : 0
                            });
                            break;
                    }
                }
                else
                {
                    //добавление админа как отдельного пользовател€
                    userPositions.Add(new UserPositionClass
                    {
                        Id = 0,
                        Fullname = $"{item.LastName} {item.FirstName}",
                        Login = item.Login,
                        Position = "admin",
                        Parent = 0
                    });
                }
            }
            return userPositions;
        }

        /// <summary>
        /// √енерирует должности
        /// </summary>
        /// <returns></returns>
        public List<Security.Models.OrganizationItem> _getBaseOrganizationItem()
        {
            var baseOrgItem = new List<Security.Models.OrganizationItem>();

            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 1, orgItemType = Security.Types.OrganizationItemType.Position, Uid = System.Guid.NewGuid(), Parent = null, Name = "ƒиректор", User = this.SystemUsers.First(c => c.Login == "gendir") });
            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 2, orgItemType = Security.Types.OrganizationItemType.Position, Uid = System.Guid.NewGuid(), Parent = 1, Name = "«аместитель директора по тех. управлению", User = this.SystemUsers.First(c => c.Login == "kurzamtb") });
            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 3, orgItemType = Security.Types.OrganizationItemType.Position, Uid = System.Guid.NewGuid(), Parent = 1, Name = "«аместитель директора по качеству", User = this.SystemUsers.First(c => c.Login == "kurzammb") });

            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 4, orgItemType = Security.Types.OrganizationItemType.Department, Uid = System.Guid.NewGuid(), Parent = 2, Name = "ќтдел »нформационных —истем" });

            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 6, orgItemType = Security.Types.OrganizationItemType.Position, Uid = System.Guid.NewGuid(), Parent = 4, Name = "Ќачальник ќтдела »нформационных —истем", User = this.SystemUsers.First(c => c.Login == "nach_ois") });
            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 7, orgItemType = Security.Types.OrganizationItemType.Position, Uid = System.Guid.NewGuid(), Parent = 6, Name = "ѕрограммист", User = this.SystemUsers.First(c => c.Login == "dev1") });
            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 8, orgItemType = Security.Types.OrganizationItemType.Position, Uid = System.Guid.NewGuid(), Parent = 6, Name = "јналитик", User = this.SystemUsers.First(c => c.Login == "dev2") });

            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 5, orgItemType = Security.Types.OrganizationItemType.Department, Uid = System.Guid.NewGuid(), Parent = 3, Name = "ќтдел  ачества" });

            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 9, orgItemType = Security.Types.OrganizationItemType.Position, Uid = System.Guid.NewGuid(), Parent = 5, Name = "Ќачальник ќтдела  ачества", User = this.SystemUsers.First(c => c.Login == "nach_manage") });
            baseOrgItem.Add(new Security.Models.OrganizationItem() { Id = 10, orgItemType = Security.Types.OrganizationItemType.Position, Uid = System.Guid.NewGuid(), Parent = 9, Name = "–аботник ќтдела  ачества", Users = this.SystemUsers.Where(c => c.Login == "manage2" || c.Login == "manage1").ToList() });
            return baseOrgItem;
        }

        /// <summary>
        /// √енерирует пользователей
        /// </summary>
        /// <returns></returns>
        private List<Security.Models.User> _getBaseUsers()
        {
            var baseUsers = new List<Security.Models.User>();
            baseUsers.Add(new Security.Models.User { Id = 1, Uid = System.Guid.NewGuid(), Login = "admin", LastName = "јдминистратор", FirstName = "—истемы" });
            baseUsers.Add(new Security.Models.User { Id = 2, Uid = System.Guid.NewGuid(), Login = "gendir", LastName = "јндреев", FirstName = "јндрей", MiddleName = "јндреевич" });
            baseUsers.Add(new Security.Models.User { Id = 3, Uid = System.Guid.NewGuid(), Login = "kurzamtb", LastName = "»ванов", FirstName = "»ван", MiddleName = "»ванович" });
            baseUsers.Add(new Security.Models.User { Id = 4, Uid = System.Guid.NewGuid(), Login = "kurzammb", LastName = "ѕетрова", FirstName = "јлександра", MiddleName = "јлександровна" });

            baseUsers.Add(new Security.Models.User { Id = 5, Uid = System.Guid.NewGuid(), Login = "nach_ois", LastName = "јлександров", FirstName = "јлександр", MiddleName = "јлександрович" });
            baseUsers.Add(new Security.Models.User { Id = 6, Uid = System.Guid.NewGuid(), Login = "dev1", LastName = "ѕопелышева", FirstName = "јнастаси€", MiddleName = "»горевна" });
            baseUsers.Add(new Security.Models.User { Id = 7, Uid = System.Guid.NewGuid(), Login = "dev2", LastName = "–оманов", FirstName = "јлександр", MiddleName = "ћихайлович" });

            baseUsers.Add(new Security.Models.User { Id = 8, Uid = System.Guid.NewGuid(), Login = "nach_manage", LastName = "–оманов", FirstName = "јлександр", MiddleName = "ћихайлович" });
            baseUsers.Add(new Security.Models.User { Id = 9, Uid = System.Guid.NewGuid(), Login = "manage1", LastName = "–оманов", FirstName = "јлександр", MiddleName = "ћихайлович" });
            baseUsers.Add(new Security.Models.User { Id = 10, Uid = System.Guid.NewGuid(), Login = "manage2", LastName = "ѕетрова", FirstName = "јлександра", MiddleName = "јлександровна" });

            return baseUsers;
        }
        //случайный пользователь
        public List<UserPositionClass> GetRandomUser()
        {
            var prepList = new List<UserPositionClass>()
            {
                this.permanentUsersList[this.random.Next(this.permanentUsersList.Count)]
            };
            return prepList;
        }

        //список случайных пользователей
        public List<UserPositionClass> GetRandomUsersList()
        {
            var prepList = new List<UserPositionClass>();
            for (int i = 0; i < this.SystemUsers.Count; i++)
            {
                prepList.Add(this.permanentUsersList[this.random.Next(this.permanentUsersList.Count)]);
            }
            return prepList.Distinct().ToList();
        }
    }
}